substitutions:
    friendly_name: "Filament Dryer"
    device_name: "filament-dryer"

packages:
    custom: !include base/custom.yaml

esp32:
    board: wemos_d1_mini32

i2c:
    sda: GPIO21
    scl: GPIO22
    scan: true
    id: i2c_bus

globals:
  - id: drying_start
    type: unsigned long
    restore_value: false
    initial_value: '0'

number:
  - platform: template
    id: heat_temp
    name: "${friendly_name} Heating temperature"
    unit_of_measurement: °C
    min_value: 20
    max_value: 100
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 60
  - platform: template
    id: cool_temp
    name: "${friendly_name} Cooling temperature"
    unit_of_measurement: °C
    min_value: 20
    max_value: 100
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 40
  - platform: template
    id: drying_time
    name: "${friendly_name} Timer"
    unit_of_measurement: s
    min_value: 0
    max_value: 86400
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 21600

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO23
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${friendly_name} PWR Button"
    internal: true
    filters:
      - delayed_on: 10ms
    on_press:
      lambda: |-
        switch (id(dryer_climate).mode) {
          case esphome::climate::ClimateMode::CLIMATE_MODE_HEAT_COOL:
          case esphome::climate::ClimateMode::CLIMATE_MODE_COOL:
            id(dryer_estop).press();
            break;
          case esphome::climate::ClimateMode::CLIMATE_MODE_HEAT:
            id(dryer_stop).press();
            break;
          case  esphome::climate::ClimateMode::CLIMATE_MODE_OFF:
            id(dryer_start).press();
            break;
        }
  - platform: gpio
    pin:
      number: GPIO32
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${friendly_name} TimeUp Button"
    internal: true
    filters:
      - delayed_on: 10ms
    on_press:
      lambda: |-
        id(drying_time).state += 3600;
        if (id(drying_time).state > 86400) {
          id(drying_time).state = 86400;
        }
  - platform: gpio
    pin:
      number: GPIO26
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${friendly_name} TimeDown Button"
    internal: true
    filters:
      - delayed_on: 10ms
    on_press:
      lambda: |-
        id(drying_time).state -= 3600;
        if (id(drying_time).state < 0) {
          id(drying_time).state = 0;
        }
  - platform: gpio
    pin:
      number: GPIO25
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${friendly_name} TempUp Button"
    internal: true
    filters:
      - delayed_on: 10ms
    on_press:
      lambda: |-
        id(heat_temp).state += 5;
        if (id(heat_temp).state > 100) {
          id(heat_temp).state = 100;
        }
  - platform: gpio
    pin:
      number: GPIO33
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${friendly_name} TempDown Button"
    internal: true
    filters:
      - delayed_on: 10ms
    on_press:
      lambda: |-
        id(heat_temp).state -= 5;
        if (id(heat_temp).state < 20) {
          id(heat_temp).state = 20;
        }

output:
  - platform: ledc
    pin: GPIO17
    id: fan_pwm_control
    frequency: 25kHz
    zero_means_zero: true
    min_power: 0.01
  - platform: ac_dimmer
    id: heater_dimmer
    gate_pin: GPIO18
    zero_means_zero: true
    min_power: 0.01
    zero_cross_pin:
        number: GPIO19
        mode:
            input: true
        inverted: yes
  - platform: template
    id: heater_output
    type: float
    write_action:
      - if:
          condition:
            lambda: return id(dryer_climate).action == esphome::climate::ClimateAction::CLIMATE_ACTION_HEATING;
          then:
            - output.set_level:
                id: heater_dimmer
                level: !lambda return state;
            - output.set_level:
                id: fan_pwm_control
                level: !lambda |
                  if (state > 0.0f) {
                    return 1.0f;
                  }
                  return 0.0f;
  - platform: template
    id: cooling_output
    type: float
    write_action:
      - if:
          condition:
            lambda: return id(dryer_climate).action == esphome::climate::ClimateAction::CLIMATE_ACTION_COOLING;
          then:
            - output.set_level:
                id: heater_dimmer
                level: !lambda return 0.0f;
            - output.set_level:
                id: fan_pwm_control
                level: !lambda return state;

#[15:59:53][I][pid.autotune:157]:   Calculated PID parameters ("Ziegler-Nichols PID" rule):
#[15:59:53][I][pid.autotune:158]:
#[15:59:53][I][pid.autotune:159]:   control_parameters:
#[15:59:53][I][pid.autotune:160]:     kp: 0.39557
#[15:59:53][I][pid.autotune:161]:     ki: 0.00602
#[15:59:53][I][pid.autotune:162]:     kd: 6.49849
#[15:59:54][I][pid.autotune:163]:
#[15:59:54][I][pid.autotune:164]:   Please copy these values into your YAML configuration! They will reset on the next reboot.
#[15:59:54][D][pid.autotune:170]:   Alternative Rules:
#[15:59:54][D][pid.autotune:200]:     Rule 'Ziegler-Nichols PI':
#[15:59:54][D][pid.autotune:201]:       kp: 0.29668, ki: 0.00271, kd: 0.00000
#[15:59:54][D][pid.autotune:200]:     Rule 'Pessen Integral PID':
#[15:59:54][D][pid.autotune:201]:       kp: 0.46149, ki: 0.00878, kd: 9.09788
#[15:59:54][D][pid.autotune:200]:     Rule 'Some Overshoot PID':
#[15:59:54][D][pid.autotune:201]:       kp: 0.21954, ki: 0.00335, kd: 9.61776
#[15:59:54][D][pid.autotune:200]:     Rule 'No Overshoot PID':
#[15:59:54][D][pid.autotune:201]:       kp: 0.13186, ki: 0.00201, kd: 5.41540

climate:
  - platform: pid
    id: dryer_climate
    name: "${friendly_name} Heater"
    sensor: ntc_temperature
    default_target_temperature: 21°C
    heat_output: heater_output
    cool_output: cooling_output
    control_parameters:
      kp: 0.13186
      ki: 0.00201
      kd: 5.41540
    visual:
      min_temperature: 20
      max_temperature: 100
      temperature_step: 1
    on_state:
      lambda: |-
        if (
          id(dryer_climate).mode == esphome::climate::ClimateMode::CLIMATE_MODE_COOL &&
          id(dryer_climate).action != esphome::climate::ClimateAction::CLIMATE_ACTION_COOLING &&
          (id(dryer_climate).current_temperature - id(dryer_climate).target_temperature) < 5.f
        ) {
          auto call = id(dryer_climate).make_call();
          call.set_mode("OFF");
          call.set_target_temperature(id(heat_temp).state);
          call.perform();
        }

sensor:
  - platform: pulse_counter
    pin: GPIO16
    id: fan_tachometer
    unit_of_measurement: 'RPM'
    update_interval: 10s
    filters:
        - multiply: 0.5
  - platform: sht3xd
    temperature:
        id: sht_temperature
        name: "${friendly_name} Temperature"
    humidity:
        id: sht_humidity
        name: "${friendly_name} Humidity"
    address: 0x44
    update_interval: 10s
  - platform: ntc
    sensor: ntc_resistance
    name: "${friendly_name} NTC Temperature"
    id: ntc_temperature
    calibration:
        b_constant: 4072
        reference_temperature: 25°C
        reference_resistance: 100kOhm
  - platform: resistance
    id: ntc_resistance
    sensor: ntc_adc
    configuration: DOWNSTREAM
    resistor: 10kOhm
    name: Resistance Sensor
  - platform: adc
    id: ntc_adc
    pin: GPIO36
    attenuation: 11db
    update_interval: 10s
  - platform: template
    id: time_left
    name: "${friendly_name} Time Left"
    unit_of_measurement: s
    update_interval: 1s
    lambda: |-
      if (id(dryer_climate).mode != esphome::climate::ClimateMode::CLIMATE_MODE_HEAT) {
        return 0.f;
      }
      float drying_time_l = id(drying_time).state;
      if (drying_time_l < 1.f) {
        return -1.f;
      }
      float time_passed = ((millis() - id(drying_start)) / 1000.f);
      if (time_passed > drying_time_l) {
        id(dryer_stop).press();
        return 0.f;
      }
      return drying_time_l - time_passed;

font:
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_24
    size: 24
    glyphs:
      - "󱣖" # mdi-sun-thermometer
      - "󱩱" # mdi-snowflake-thermometer
      - "󰤄" # mdi-power-sleep
      - "󱈸" # mdi-exclamation-thick
      - "󰤆" # mdi-power-standby
  - file: "gfonts://Roboto"
    id: font_16
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    address: 0x3C
    lambda: |-
      const char* climate_icon = "󱈸"; // mdi-exclamation-thick

      switch (id(dryer_climate).mode) {
        case esphome::climate::ClimateMode::CLIMATE_MODE_OFF:
          climate_icon = "󰤆"; // mdi-power-standby
          break;
        case esphome::climate::ClimateMode::CLIMATE_MODE_COOL:
          climate_icon = "󱩱"; // mdi-snowflake-thermometer
          break;
        case esphome::climate::ClimateMode::CLIMATE_MODE_HEAT:
          climate_icon = "󱣖"; // mdi-sun-thermometer
          break;
      }

      it.print(0, 27, id(icon_font_24), TextAlign::BASELINE_LEFT, climate_icon);
      it.printf(29, 15, id(font_16), TextAlign::BASELINE_LEFT, "%.1f°", id(dryer_climate).current_temperature);
      it.printf(127, 15, id(font_16), TextAlign::BASELINE_RIGHT, "%.0f %%", id(sht_humidity).state);

      float target_temp;
      unsigned long time_left_l;
      if (id(dryer_climate).mode == esphome::climate::ClimateMode::CLIMATE_MODE_HEAT) {
        target_temp = id(dryer_climate).target_temperature;
        time_left_l = id(time_left).state;
      } else {
        target_temp = id(heat_temp).state;
        time_left_l = id(drying_time).state;
      }
      it.printf(29, 31, id(font_16), TextAlign::BASELINE_LEFT, "%.0f°", target_temp);
      if (id(drying_time).state > 0) {
        it.printf(127, 31, id(font_16), TextAlign::BASELINE_RIGHT, "%02d:%02d:%02d", (time_left_l / 3600), (time_left_l / 60) % 60, time_left_l % 60);
      } else {
        it.print(127, 31, id(font_16), TextAlign::BASELINE_RIGHT, "--:--:--");
      }

button:
  - platform: template
    name: "PID Climate Autotune"
    internal: true
    on_press:
      - climate.pid.autotune: dryer_climate
  - platform: template
    name: "${friendly_name} Start"
    id: dryer_start
    on_press:
      - lambda: |-
          id(drying_start) = millis();
          auto call = id(dryer_climate).make_call();
          call.set_mode("HEAT");
          call.set_target_temperature(id(heat_temp).state);
          call.perform();
  - platform: template
    name: "${friendly_name} Stop"
    id: dryer_stop
    on_press:
      - lambda: |-
          auto call = id(dryer_climate).make_call();
          call.set_mode("COOL");
          call.set_target_temperature(id(cool_temp).state);
          call.perform();
  - platform: template
    name: "${friendly_name} E-Stop"
    id: dryer_estop
    on_press:
      - lambda: |-
          auto call = id(dryer_climate).make_call();
          call.set_mode("OFF");
          call.set_target_temperature(id(heat_temp).state);
          call.perform();
