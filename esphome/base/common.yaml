esphome:
  name: "${type_prefix_host}-${device_name}"

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

# Enable webserver (required for prometheus)
web_server:
  auth:
    username: !secret web_user
    password: !secret web_password
  local: true
  version: 2
  include_internal: true

prometheus:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${type_prefix_host}-${device_name}"
    password: !secret backup_ap_password

captive_portal:

text_sensor:
  - platform: version
    id: esphome_device_version
    internal: true
    hide_timestamp: true
    on_value:
      - binary_sensor.template.publish:
          id: esphome_device_update_available
          state: !lambda "return id(esphome_device_version).state != id(esphome_server_version).state;"
  - platform: homeassistant
    entity_id: update.esphome_update
    internal: true
    id: esphome_server_version
    attribute: installed_version
    on_value:
      - binary_sensor.template.publish:
          id: esphome_device_update_available
          state: !lambda "return id(esphome_device_version).state != id(esphome_server_version).state;"

button:
  - platform: safe_mode
    name: "${friendly_name} ${type_prefix} Restart in Safe Mode"
    internal: true

binary_sensor:
  - platform: status
    name: "${friendly_name} ${type_prefix} Status"
    internal: true
  - platform: template
    id: esphome_device_update_available
    device_class: update
    name: "${friendly_name} ${type_prefix} Update available"

sensor:
  - platform: wifi_signal
    name: "${friendly_name} ${type_prefix} WiFi Signal"
    update_interval: 60s
    internal: true
